def merge_sort_inversions(arr):
    if len(arr) <= 1:
        return arr, 0

    mid = len(arr) // 2
    left, inv_left = merge_sort_inversions(arr[:mid])
    right, inv_right = merge_sort_inversions(arr[mid:])
    merged, inv_split = merge_and_count(left, right)

    return merged, inv_left + inv_right + inv_split



def merge_and_count(left, right):
    i, j = 0, 0
    merged = []
    inv_count = 0

    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
            inv_count += len(left) - i   # Count inversions
    merged.extend(left[i:])
    merged.extend(right[j:])
    return merged, inv_count

arr = [12, 14, 9, 8, 5]
sorted_arr, inversions = merge_sort_inversions(arr)
print("Sorted array:", sorted_arr)
print("Inversion count:", inversions)
