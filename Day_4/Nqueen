class Solution(object):
    
    def is_safe(self,grid,row,col):
        # upper check
        for r in range(row):
            if grid[r][col]=="Q":
                return False
        #left diagonal
        r , c = row-1 , col-1
        while r>=0 and c>=0:
            if grid[r][c]=="Q":
                return False
            r-=1
            c-=1
        # right diagonal
        r , c= row-1 ,col+1
        while r>=0 and c<len(grid):
            if grid[r][c]=="Q":
                return False
            r-=1
            c+=1
        return True
        
            
    
    def backtrack(self,grid,res,n,row):
        if row == n:
            res.append(["".join(i)   for i in grid])
            return
        for col in range(n):
            if self.is_safe(grid,row,col):
                grid[row][col]="Q"
                self.backtrack(grid,res,n,row+1)
                grid[row][col]="."
                
    def solveNQueens(self, n):
        grid = [["."]*n for i  in range(n)]
        res=[]
        self.backtrack(grid,res,n,0)
        return res













